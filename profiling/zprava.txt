Celkový čas behu programu: 0.06 sekundy
-Testované na 1 000 000 náhodných čísiel

Najčastejšie volané fukcnie:
    - 33.33% času <= void __gnu_cxx::new_allocator<long double>::construct<long double, long double const&>(long double*, long double const&) 
    - 16.67% času <= Sub(long double, long double) 
    - 16.67% času <= CalculateMean(std::vector<long double, std::allocator<long double> > const&)

Zhrnutie:
    Program trávi najviac času vo funkci "void __gnu_cxx::new_allocator<long double>::construct<long double, long double const&>(long double*, long double const&)", v ktorej alokuje pamäť pre prvky dynamického poľa typu 'long double'. Ďalej trávi 16.67% času vo funkci "Sub" a ďaľších 16.67% vo funkci "CalculateMean". v "Sub" počíta rozdieľ 2 čísiel a v "CalculateMean" počíta aritmetický priemer všetkých zadaných čísiel.

Optimalicaze kódu:
    Pri optimalizacií kódu je dobré sa zamerať na funkciu "void __gnu_cxx::new_allocator<long double>::construct<long double, long double const&>(long double*, long double const&), ktorá alokuje pamäť pre vector. V programe sa spúšta viac krát v dôsledku toho, že nepoznáme dopredu veľkosť, ktorú bude treba alokovať a program musí stále reallocovať nový priestor a skopírovať všetky prvky. 
    K tomu môžeme použiť napríklad 'std::cin.rdbuf()->in_avail()'. Vráti odhadovaný počet znakov, ktoré sa dajú ihneď načítať. Tento údaj môžme použiť na odhad velkosti vstupu a pouzit ho v '<arr_name>.reserve(available_chars)' pre predalokovanie pamäte, a tým znížiť časovú náročnosť načítania čisiel, v prípade že je vstup dostupný ihneď. Môžeme pouziť aj inú štruktúru ako napríklad deque, ktorá pri alokácii nemusí kopírovat prvky, ajkeď tento spôsob by neriešil samotné alokácie.